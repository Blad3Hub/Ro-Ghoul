function HopServer()
		local PlaceID = game.PlaceId
		local AllIDs = {}
		local foundAnything = ""
		local actualHour = os.date("!*t").hour
		local Deleted = false
		 --[[
		 local File = pcall(function()
			AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
		 end)
		 if not File then
			table.insert(AllIDs, actualHour)
			writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
		 end
		 ]]
		function TPReturner()
			local Site;
			if foundAnything == "" then
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
			else
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
			end
			local ID = ""
			if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
				foundAnything = Site.nextPageCursor
			end
			local num = 0;
			for i,v in pairs(Site.data) do
				local Possible = true
				ID = tostring(v.id)
				if tonumber(v.maxPlayers) > tonumber(v.playing) then
					for _,Existing in pairs(AllIDs) do
						if num ~= 0 then
							if ID == tostring(Existing) then
								Possible = false
							end
						else
							if tonumber(actualHour) ~= tonumber(Existing) then
								local delFile = pcall(function()
									-- delfile("NotSameServers.json")
									AllIDs = {}
									table.insert(AllIDs, actualHour)
								end)
							end
						end
						num = num + 1
					end
					if Possible == true then
						table.insert(AllIDs, ID)
						wait()
						pcall(function()
							-- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
							wait()
							game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
						end)
						wait(4)
					end
				end
			end
		end
	
		function Teleport()
			while wait() do
				pcall(function()
					TPReturner()
					if foundAnything ~= "" then
						TPReturner()
					end
				end) 
			end
		end
	
		Teleport() 
		wait(1)
end

function QueOnTele (S)
    local request = http_request or request or (syn and syn.request)
    game:GetService("Players").LocalPlayer.OnTeleport:Connect(function(s)
        if s == Enum.TeleportState.Started then
            if syn then
                syn.queue_on_teleport(S)
            else 
                queue_on_teleport(S)
            end
        end
    end)
end

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/GreenDeno/Venyx-UI-Library/main/source.lua"))()
local Window = Library.new("Tsuki | BZ : Ro-Ghoul", 5013109572)

local Misc = Window:addPage("Misc", 5012544693)
local MiscSection = Misc:addSection("Misc")
MiscSection:addButton("Hop 2 Low", function(s)
    HopServer()
    QueOnTele([[loadstring(game:HttpGet"https://raw.githubusercontent.com/Blad3Hub/Ro-Ghoul/main/Script")()]])
end)

MiscSection:addButton("Rejoin", function(s)
    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game:GetService("Players").LocalPlayer)
    QueOnTele([[loadstring(game:HttpGet"https://raw.githubusercontent.com/Blad3Hub/Ro-Ghoul/main/Script")()]])
end)

local Setting = Window:addPage("Setting", 5012544693)
local VersionSection = Setting:addSection("Prototype")


local KeybindSection = Setting:addSection("Keybind")

wait(0.5)

KeybindSection:addKeybind("Toggle Keybind", Enum.KeyCode.RightControl, function()
    Window:toggle()
end)
